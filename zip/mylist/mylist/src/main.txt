#include <Arduino.h>
#include <List.hpp>
#include <ArduinoJson.h>
#include <WiFi.h>
#include "config.h"

#define INCREMENT true // sort in increasing order
StaticJsonDocument<12300> doc;
extern const char *jsonData;

class Item {
  public:
    Item(int at, const char *direction, const char *dest) {
      estArrivTime = at;
      inbound = strcmp(direction,"inbound") == 0;
      destination = dest;
    };
    ~Item() {
      //Serial.println("Item destroyed"); 
    }
    int getArriveTime() {
      return estArrivTime;
    }
    const char *getDirection() {
      return inbound ? "inbound" : "outbound";
    }
    const char *getDestination() {
      return destination;
    }
    bool getDirectionB() {
      return inbound;
    }
  private:
    int estArrivTime;
    bool inbound;
    const char *destination;
};

List<Item> l;
int printed = 0;

/// @brief 
/// @param l 
/// @param r 
/// @return 0 if equal 1 if greater -1 if less

int compare2(const void *l,const void *r) {
  int lv = ((Item*)l)->getArriveTime();
  int rv = ((Item*)r)->getArriveTime();
  if ( lv == rv)
    return 0;
  else if (INCREMENT)
    return lv > rv ? 1 : -1;
  else
    return lv < rv ? 1 : -1;
}

void printItem(Item *pI) {
  Serial.print(pI->getArriveTime());
  Serial.print(":");
  Serial.print(pI->getDirection());
  Serial.print(":");
  Serial.println(pI->getDestination());
}

void filterItem(bool dir,int limit) {
  for (int i=0;i<l.getSize();i++) {
    if (l[i].getDirectionB() == dir) {
      printItem(l.getPointer(i));
      printed++;
    }
    if (printed == limit)
      break;
  } 
}

void setup() {
  Serial.begin(115200);
  delay(500);
  Serial.println();

  // get wifi connection
   WiFi.mode(WIFI_STA); //Optional
    WiFi.begin(ssid, password);
    Serial.println("\nConnecting");

    while(WiFi.status() != WL_CONNECTED){
        Serial.print(".");
        delay(100);
    }

    Serial.println("\nConnected to the WiFi network");
    Serial.print("Local ESP32 IP: ");
    Serial.println(WiFi.localIP());
    
  DeserializationError error = deserializeJson(doc, jsonData);

  // Test if parsing succeeds.
  if (error) {
    Serial.print(F("deserializeJson() failed: "));
    Serial.println(error.f_str());
    return;
  }
  else
    Serial.println("JSON deserialised OK");

  for (int i=0;i<doc.size();i++) {
    Item a = Item(doc[i]["timeToStation"],doc[i]["direction"],doc[i]["destinationName"]);
    l.add(a);
  }
    
  Serial.println(l.getSize());
  Serial.println("===============");
  for (int i=0;i<l.getSize();i++) {
    printItem(l.getPointer(i));
  }
  Serial.println("===============");
  l.sort(compare2);
  for (int i=0;i<l.getSize();i++)
    printItem(l.getPointer(i));
  Serial.println("===============");

  // now print the top 2 inbound/outbound
  printed = 0;
  filterItem(true,2);
  Serial.println("===============");
  printed = 0;
  filterItem(false,2);

  l.clear();
}

void loop() {
}
